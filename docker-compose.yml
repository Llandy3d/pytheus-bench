version: "3.8"

services:
    server-singleprocess-a:
        container_name: server-singleprocess-a
        build:
            context: ./
            dockerfile: Dockerfile
            ssh:
                - default
        command: "gunicorn -w 1 --bind 0.0.0.0:5000 server:app"
        environment:
            WORKERS_COUNT: 1
        ports:
            - "5000:5000"
        depends_on:
            - redis

    server-singleprocess-b:
        container_name: server-singleprocess-b
        build:
            context: ./
            dockerfile: Dockerfile
            ssh:
                - default
        command: "gunicorn -w 4 --bind 0.0.0.0:5002 server:app"
        environment:
            WORKERS_COUNT: 4
        ports:
            - "5002:5002"
        depends_on:
            - redis

    server-multiprocess-a:
        container_name: server-multiprocess-a
        build:
            context: ./
            dockerfile: Dockerfile
            ssh:
                - default
        command: "gunicorn -w 1 --bind 0.0.0.0:5001 server:app"
        environment:
            PYTHEUS_MULTIPROCESS_TEST: 1
            WORKERS_COUNT: 1
        ports:
            - "5001:5001"
        depends_on:
            - redis

    server-multiprocess-b:
        container_name: server-multiprocess-b
        build:
            context: ./
            dockerfile: Dockerfile
            ssh:
                - default
        command: "gunicorn -w 4 --bind 0.0.0.0:5003 server:app"
        environment:
            PYTHEUS_MULTIPROCESS_TEST: 1
            WORKERS_COUNT: 4
        ports:
            - "5003:5003"
        depends_on:
            - redis

    redis:
        image: redis
        container_name: redis
        ports:
            - "6379:6379"

    prometheus:
        image: prom/prometheus:latest
        user: root
        container_name: prometheus
        restart: unless-stopped
        ports:
            - "9090:9090"
        volumes:
            - ./prometheus:/etc/prometheus
            - prometheus_data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.enable-lifecycle'  # reload config without restart

    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        ports:
            - "3000:3000"
        volumes:
            - ./datasources:/etc/grafana/provisioning/datasources/

volumes:
    prometheus_data: {}
